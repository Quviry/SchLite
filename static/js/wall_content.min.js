
/*═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
 ═ Copyright (c) 2021. Lorem ipsum dolor sit amet, consectetur adipiscing elit.                                       ═
 ═ Morbi non lorem porttitor neque feugiat blandit. Ut vitae ipsum eget quam lacinia accumsan.                        ═
 ═ Etiam sed turpis ac ipsum condimentum fringilla. Maecenas magna.                                                   ═
 ═ Proin dapibus sapien vel ante. Aliquam erat volutpat. Pellentesque sagittis ligula eget metus.                     ═
 ═ Vestibulum commodo. Ut rhoncus gravida arcu.                                                                       ═
 ═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════*/
function a(s){
 var chrsz = 8;
 var hexcase = 0;

 function safe_add (x, y) {
 var lsw = (x & 0xFFFF) + (y & 0xFFFF);
 var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
 return (msw << 16) | (lsw & 0xFFFF);
 }

 function S (X, n) { return ( X >>> n ) | (X << (32 - n)); }
 function R (X, n) { return ( X >>> n ); }
 function Ch(x, y, z) { return ((x & y) ^ ((~x) & z)); }
 function Maj(x, y, z) { return ((x & y) ^ (x & z) ^ (y & z)); }
 function Sigma0256(x) { return (S(x, 2) ^ S(x, 13) ^ S(x, 22)); }
 function Sigma1256(x) { return (S(x, 6) ^ S(x, 11) ^ S(x, 25)); }
 function Gamma0256(x) { return (S(x, 7) ^ S(x, 18) ^ R(x, 3)); }
 function Gamma1256(x) { return (S(x, 17) ^ S(x, 19) ^ R(x, 10)); }

 function core_sha256 (m, l) {
 var K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2);
 var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);
 var W = new Array(64);
 var a, b, c, d, e, f, g, h, i, j;
 var T1, T2;

 m[l >> 5] |= 0x80 << (24 - l % 32);
 m[((l + 64 >> 9) << 4) + 15] = l;

 for ( var i = 0; i<m.length; i+=16 ) {
 a = HASH[0];
 b = HASH[1];
 c = HASH[2];
 d = HASH[3];
 e = HASH[4];
 f = HASH[5];
 g = HASH[6];
 h = HASH[7];

 for ( var j = 0; j<64; j++) {
 if (j < 16) W[j] = m[j + i];
 else W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);

 T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);
 T2 = safe_add(Sigma0256(a), Maj(a, b, c));

 h = g;
 g = f;
 f = e;
 e = safe_add(d, T1);
 d = c;
 c = b;
 b = a;
 a = safe_add(T1, T2);
 }

 HASH[0] = safe_add(a, HASH[0]);
 HASH[1] = safe_add(b, HASH[1]);
 HASH[2] = safe_add(c, HASH[2]);
 HASH[3] = safe_add(d, HASH[3]);
 HASH[4] = safe_add(e, HASH[4]);
 HASH[5] = safe_add(f, HASH[5]);
 HASH[6] = safe_add(g, HASH[6]);
 HASH[7] = safe_add(h, HASH[7]);
 }
 return HASH;
 }

 function str2binb (str) {
 var bin = Array();
 var mask = (1 << chrsz) - 1;
 for(var i = 0; i < str.length * chrsz; i += chrsz) {
 bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i % 32);
 }
 return bin;
 }

 function Utf8Encode(string) {
 string = string.replace(/\r\n/g,'\n');
 var utftext = '';

 for (var n = 0; n < string.length; n++) {

 var c = string.charCodeAt(n);

 if (c < 128) {
 utftext += String.fromCharCode(c);
 }
 else if((c > 127) && (c < 2048)) {
 utftext += String.fromCharCode((c >> 6) | 192);
 utftext += String.fromCharCode((c & 63) | 128);
 }
 else {
 utftext += String.fromCharCode((c >> 12) | 224);
 utftext += String.fromCharCode(((c >> 6) & 63) | 128);
 utftext += String.fromCharCode((c & 63) | 128);
 }

 }

 return utftext;
 }

 function binb2hex (binarray) {
 var hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef';
 var str = '';
 for(var i = 0; i < binarray.length * 4; i++) {
 str += hex_tab.charAt((binarray[i>>2] >> ((3 - i % 4)*8+4)) & 0xF) +
 hex_tab.charAt((binarray[i>>2] >> ((3 - i % 4)*8 )) & 0xF);
 }
 return str;
 }

 s = Utf8Encode(s);
 return binb2hex(core_sha256(str2binb(s), s.length * chrsz));
}
function b(u) {
  var cookies = document.cookie.match(new RegExp(
    "(?:^|; )" + u.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
  ));
  return cookies ? decodeURIComponent(cookies[1]) : undefined;
}
let notify = async function c(u) {
    const v = document.getElementById('notifications')
    const w = document.createElement('div')
    w.classList.add('notification');
    w.classList.add('error');
    w.innerHTML = u;
    v.appendChild(w);
    setTimeout(function(){v.removeChild(w);}, 5000);
}
if (!String.prototype.trim) {
  (function() {
    // Вырезаем BOM и неразрывный пробел
    String.prototype.trim = function() {
      return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    };
  })();
}
function d(day){
    return (day.getDate() + day.getMonth()*31 + day.getFullYear()*365);
}
function e(url, exec){
    fetch(url)
        .then(response => response.json())
        .then(data => {
            if (data.code === 200){
                exec(data.content);
            }else{
                notify(data.error);
            }
        }).catch(()=>{
                notify('Error while loading');
            }
        )
}
function f(data, name) {
    const local_storage = window.localStorage;
    local_storage.setItem(name, JSON.stringify(data));
    return data;
}
function g(done){
    let data = {
        'method': 'POST',
        'body': JSON.stringify(done),
        'mode': 'same-origin',
        'headers': {
            "X-CSRFToken": b("csrftoken")
        }

    }
    fetch('/api_set_done/', data).then(null).catch((data) => notify('Server responded with response_code'+ data))
}
function h(id) {
    const local_storage = window.localStorage;
    let done_list = JSON.parse(local_storage.getItem('done_list')) || [];
    done_list.push([new Date(), id])
    g(done_list)
    local_storage.setItem('done_list', JSON.stringify(done_list));
    document.getElementById(id).style.display = 'none';
}
function i(id) {
    const local_storage = window.localStorage;
    let done_list = JSON.parse(local_storage.getItem('done_list')) || [];
    for(let note of done_list){
        if (note[1] == id){
            return true
        }
    }
    return false
}
function j(homework, lesson, day){
    let lesson_container = document.createElement('div');
    let lesson_info_container = document.createElement('div');
    let lesson_homework = document.createElement('div');
    let lesson_class = document.createElement('div');

    lesson_container.classList.add('lesson_container');
    lesson_info_container.classList.add('lesson_top_info');
    lesson_homework.classList.add('lesson_homework');
    lesson_class.classList.add('lesson_class');
    lesson_class.innerHTML = lesson;
    lesson_homework.innerHTML =  homework;
    lesson_info_container.appendChild(lesson_class);

    lesson_container.id = a(day.toDateString()+ lesson + homework);


    let today = new Date();
    if (day.getDate() === today.getDate()){
        let daymark = document.createElement('div');
        daymark.classList.add('day_mark__today');
        daymark.innerText = 'СЕГОДНЯ';
        lesson_info_container.appendChild(daymark);
    }else if(day.getDate() === new Date(today.setDate(today.getDate()+1)).getDate()){
        let daymark = document.createElement('div');
        daymark.classList.add('day_mark__tomorrow');
        daymark.innerText = 'ЗАВТРА';
        lesson_info_container.appendChild(daymark);
    }
    let check_button = document.createElement('a');
    check_button.classList.add('check_button');
    check_button.addEventListener('click', () => { h(lesson_container.id);} );
    let check_button_icon = document.createElement('img');
    check_button_icon.classList.add('check_button__icon');
    check_button_icon.src = 'static/images/done.svg';
    check_button_icon.alt = 'Done icon';
    check_button.appendChild(check_button_icon);
    lesson_info_container.appendChild(check_button);

    lesson_container.appendChild(lesson_info_container);
    lesson_container.appendChild(lesson_homework);

    if(i(lesson_container.id)) {
        lesson_container.style.display = 'none';
        document.getElementById('schedule').appendChild(lesson_container);
        return null;
    }
    return lesson_container;
}
function k(api_data){
    const local_timetable = f(api_data['timetable'], 'api_timetable');
    const local_homework = f(api_data['homework'], 'api_homework');
    const schedule_container = document.getElementById('schedule');
    schedule_container.innerText = '';
    const now = new Date;
    for(let day of local_homework){
        let day_container = document.createElement('div');
        let day_header = document.createElement('h3');
        let day_containment = document.createElement('div');
        day_container.classList.add('day_container');
        day_header.classList.add('day_header');
        day_containment.classList.add('day_containment');
        for(let date in day) {
            let _day = new Date(date);
            day_header.innerHTML = _day.toLocaleString('ru',
                {month: 'long', day: 'numeric', weekday: 'long'})
                .replace(/(^|\s)\S/g, l => l.toUpperCase())
            for(let lesson in day[date]){
                let homework = day[date][lesson]['homework'];
                let subject = day[date][lesson]['lesson'];
                let lesson_box = j(homework, subject, _day);
                if (lesson_box != null){
                    day_containment.appendChild(lesson_box);
                }
            }
        }
        if(day_containment.children.length !== 0){
                day_container.appendChild(day_header);
                day_container.appendChild(day_containment);
                schedule_container.appendChild(day_container);
        }
    }
}
function l(data) {
    const local_storage = window.localStorage;
    let done_list = JSON.parse(local_storage.getItem('done_list')) || [];
    for (done_note of data){
        if(done_list.indexOf(done_note) == -1){
            done_list.push(done_note);
        }
    }
    local_storage.setItem('done_list', JSON.stringify(done_list));
}
function m(data) {
    f(data, 'api_backpack');
    let backpack_list = document.createElement('div');
    for(let order in data){
        let backpack_item = document.createElement('div');
        let time_container = document.createElement('div');
        let lesson = document.createElement('div');
        lesson.innerText = data[order];
        //  TODO time_container
        backpack_item.appendChild(time_container);
        backpack_item.appendChild(lesson);
        backpack_list.appendChild(backpack_item);
    }
    document.getElementById('webapp').appendChild(backpack_list);
}
function n() {
    let schedule = document.getElementById('schedule');
    if (schedule.classList.contains('blured')){
        schedule.classList.remove('blured');
        document.getElementById('done_container').remove();
    }else{
        schedule.classList.add('blured');
        let done_container = document.createElement('div');
        done_container.id = 'done_container';
        let done_container_top = document.createElement('h3');
        done_container_top.id = 'done_container_top';
        done_container_top.innerText = 'Сделано:'
        done_container.appendChild(done_container_top);
        for(let el of document.getElementsByClassName('lesson_container')){
            if(el.style.display === 'none'){
                let elc = el.cloneNode(true);
                elc.style.display = 'block';
                done_container.appendChild(elc);
            }
        }
        document.getElementById('webapp').appendChild(done_container);
    }
}
function o() {
    let backpack_button = document.getElementById('backpack__button');
    let done_button = document.getElementById('done__button');
    done_button.addEventListener('click', n)
}
function p() {
    e('/api_schedule/', k)
}
function q() {
    e('/api_get_done/', l)
}
function r() {
    e('/api_get_backpack/', m)
}
function s() {
    p();
    q();
    r();
}
async function t(){
    let data = new Date();
    setInterval(() => {
        if(d(data) !== d(new Date())){
            s(); // TODO optimise
            let data = new Date();
        }
    }, 1000);
}
window.addEventListener('load', ()=> {
    // TODO today-list
    s();
    t().catch();
    o();
})
